// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.24
// source: playground-grpc.proto

package grpc

import (
	context "context"
	errors "errors"

	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_playground_grpc_proto struct{}

func (drpcEncoding_File_playground_grpc_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_playground_grpc_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_playground_grpc_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_playground_grpc_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_playground_grpc_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCPlaygroundDrpcClient interface {
	DRPCConn() drpc.Conn

	CreateTodo(ctx context.Context, in *TodoData) (*TodoData, error)
	ReadTodo(ctx context.Context, in *TodoData) (*TodoData, error)
	UpdateTodo(ctx context.Context, in *TodoData) (*TodoData, error)
	DeleteTodo(ctx context.Context, in *TodoData) (*TodoData, error)
}

type drpcPlaygroundDrpcClient struct {
	cc drpc.Conn
}

func NewDRPCPlaygroundDrpcClient(cc drpc.Conn) DRPCPlaygroundDrpcClient {
	return &drpcPlaygroundDrpcClient{cc}
}

func (c *drpcPlaygroundDrpcClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcPlaygroundDrpcClient) CreateTodo(ctx context.Context, in *TodoData) (*TodoData, error) {
	out := new(TodoData)
	err := c.cc.Invoke(ctx, "/PlaygroundDrpc/CreateTodo", drpcEncoding_File_playground_grpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPlaygroundDrpcClient) ReadTodo(ctx context.Context, in *TodoData) (*TodoData, error) {
	out := new(TodoData)
	err := c.cc.Invoke(ctx, "/PlaygroundDrpc/ReadTodo", drpcEncoding_File_playground_grpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPlaygroundDrpcClient) UpdateTodo(ctx context.Context, in *TodoData) (*TodoData, error) {
	out := new(TodoData)
	err := c.cc.Invoke(ctx, "/PlaygroundDrpc/UpdateTodo", drpcEncoding_File_playground_grpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcPlaygroundDrpcClient) DeleteTodo(ctx context.Context, in *TodoData) (*TodoData, error) {
	out := new(TodoData)
	err := c.cc.Invoke(ctx, "/PlaygroundDrpc/DeleteTodo", drpcEncoding_File_playground_grpc_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCPlaygroundDrpcServer interface {
	CreateTodo(context.Context, *TodoData) (*TodoData, error)
	ReadTodo(context.Context, *TodoData) (*TodoData, error)
	UpdateTodo(context.Context, *TodoData) (*TodoData, error)
	DeleteTodo(context.Context, *TodoData) (*TodoData, error)
}

type DRPCPlaygroundDrpcUnimplementedServer struct{}

func (s *DRPCPlaygroundDrpcUnimplementedServer) CreateTodo(context.Context, *TodoData) (*TodoData, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPlaygroundDrpcUnimplementedServer) ReadTodo(context.Context, *TodoData) (*TodoData, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPlaygroundDrpcUnimplementedServer) UpdateTodo(context.Context, *TodoData) (*TodoData, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCPlaygroundDrpcUnimplementedServer) DeleteTodo(context.Context, *TodoData) (*TodoData, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCPlaygroundDrpcDescription struct{}

func (DRPCPlaygroundDrpcDescription) NumMethods() int { return 4 }

func (DRPCPlaygroundDrpcDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/PlaygroundDrpc/CreateTodo", drpcEncoding_File_playground_grpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlaygroundDrpcServer).
					CreateTodo(
						ctx,
						in1.(*TodoData),
					)
			}, DRPCPlaygroundDrpcServer.CreateTodo, true
	case 1:
		return "/PlaygroundDrpc/ReadTodo", drpcEncoding_File_playground_grpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlaygroundDrpcServer).
					ReadTodo(
						ctx,
						in1.(*TodoData),
					)
			}, DRPCPlaygroundDrpcServer.ReadTodo, true
	case 2:
		return "/PlaygroundDrpc/UpdateTodo", drpcEncoding_File_playground_grpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlaygroundDrpcServer).
					UpdateTodo(
						ctx,
						in1.(*TodoData),
					)
			}, DRPCPlaygroundDrpcServer.UpdateTodo, true
	case 3:
		return "/PlaygroundDrpc/DeleteTodo", drpcEncoding_File_playground_grpc_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCPlaygroundDrpcServer).
					DeleteTodo(
						ctx,
						in1.(*TodoData),
					)
			}, DRPCPlaygroundDrpcServer.DeleteTodo, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterPlaygroundDrpc(mux drpc.Mux, impl DRPCPlaygroundDrpcServer) error {
	return mux.Register(impl, DRPCPlaygroundDrpcDescription{})
}

type DRPCPlaygroundDrpc_CreateTodoStream interface {
	drpc.Stream
	SendAndClose(*TodoData) error
}

type drpcPlaygroundDrpc_CreateTodoStream struct {
	drpc.Stream
}

func (x *drpcPlaygroundDrpc_CreateTodoStream) SendAndClose(m *TodoData) error {
	if err := x.MsgSend(m, drpcEncoding_File_playground_grpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPlaygroundDrpc_ReadTodoStream interface {
	drpc.Stream
	SendAndClose(*TodoData) error
}

type drpcPlaygroundDrpc_ReadTodoStream struct {
	drpc.Stream
}

func (x *drpcPlaygroundDrpc_ReadTodoStream) SendAndClose(m *TodoData) error {
	if err := x.MsgSend(m, drpcEncoding_File_playground_grpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPlaygroundDrpc_UpdateTodoStream interface {
	drpc.Stream
	SendAndClose(*TodoData) error
}

type drpcPlaygroundDrpc_UpdateTodoStream struct {
	drpc.Stream
}

func (x *drpcPlaygroundDrpc_UpdateTodoStream) SendAndClose(m *TodoData) error {
	if err := x.MsgSend(m, drpcEncoding_File_playground_grpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCPlaygroundDrpc_DeleteTodoStream interface {
	drpc.Stream
	SendAndClose(*TodoData) error
}

type drpcPlaygroundDrpc_DeleteTodoStream struct {
	drpc.Stream
}

func (x *drpcPlaygroundDrpc_DeleteTodoStream) SendAndClose(m *TodoData) error {
	if err := x.MsgSend(m, drpcEncoding_File_playground_grpc_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
